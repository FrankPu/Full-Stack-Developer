//手写koa中的async原理


const http=require('http');

module.exports=class {
  constructor(){
    //定义一个待执行的server.use()队列
    this.__queue=[];

    this.__server=http.createServer((req, res)=>{
      const _this=this;

      if(this.__queue.length>0){
        //准备ctx对象
        const ctx = {
          req,
          res,
          request: {},
          response: {}
        };

        /*-------------重点开始-------------*/
        _run(0);

        async function _run(n, cb){
          let fn=_this.__queue[n];
          let str=fn.constructor.toString();

          //1.async函数
          if(str.indexOf('AsyncFunction')!=-1){
            await fn(ctx, function (){
              return new Promise((resolve, reject)=>{
                _run(n+1, function (){
                  resolve();
                });
              });
            });
          //2.普通函数
          }else if(str.indexOf('Function')!=-1){
            fn(ctx, function (){
              _run(n+1);
            });
          }

          cb && cb();
        }
        /*-------------重点结束-------------*/

      }else{
        //没有server.use(async function(ctx,next){...} 的情况
        res.writeHeader(404);
        res.write('请传入一个待执行function');
        res.end();
      }
    });
  }

  listen(port=80){
    this.__server.listen(port);
  }

  use(fn){
    let str=fn.constructor.toString();

    //先转字符串，再使用indexof判断种类
    if(str.indexOf('GeneratorFunction')!=-1){
      console.warn('koa3.0中generator已经抛弃了');
    }

    this.__queue.push(fn);

  }
};
