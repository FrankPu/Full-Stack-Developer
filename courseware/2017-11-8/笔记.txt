ES6：
变量、箭头、参数、map、reduce、filter、forEach

Promise.all([p, p2, p3, ...]).then()
generator

------------------------------------------------------------------------------

generator——特殊的函数

普通函数——一直执行到头      飞机
generator——中间可以暂停    出租车

yield：
1.传参
2.返回值

------------------------------------------------------------------------------

function *show(){
  xxxx
  xxx

  let data1=yield $.ajax('a.txt');

  xxxx
  xxx
  xxx

  let data2=yield $.ajax('b.txt');

  xxxx
  xxxx
}

------------------------------------------------------------------------------

runner(function *(){
  let data1=$.ajax();

  if(xxx){
    let data1=$.ajax();
    let data1=$.ajax();
    let data1=$.ajax();
    let data1=$.ajax();
  }else{
    let data1=$.ajax();
    let data1=$.ajax();
    let data1=$.ajax();
  }
});

$.ajax({
  success(){
    if(xxx){
      $.ajax({
        success(){
          $.ajax({
            success(){
              $.ajax({
                success(){

                }
              })
            }
          })
        }
    }else{
      $.ajax({
        success(){
          $.ajax({
            success(){
              $.ajax({
                success(){

                }
              })
            }
          })
        }
    }
    })
  }
})

------------------------------------------------------------------------------

async/await

------------------------------------------------------------------------------

Promise本质：等待异步操作结束
generator本质：无感处理异步操作
async本质：官方runner

------------------------------------------------------------------------------

runner(function *(){
  xxx

  let 结果1=yield 异步操作1;

  xxx

  let 结果2=yield 异步操作2;

  xxx
});

(async ()=>{
  xxx

  let 结果1=await 异步操作1;

  xxx

  let 结果2=await 异步操作2;

  xxx
})();

------------------------------------------------------------------------------

模块=>元件=>组件

------------------------------------------------------------------------------

1.民间的——sea.js、require.js
  CMD、AMD
2.nodejs模块化
3.ES6模块化

------------------------------------------------------------------------------

模块：
1.定义
2.调用

------------------------------------------------------------------------------

sea——按需引用、解决依赖

------------------------------------------------------------------------------

//1.定义模块    mod1.js
define(function (require, exports, module){
  exports.a=12;
  exports.b=5;
});

//2.引用模块    1.html
seajs.use(['xxx.js', 'xxx.js', ...], function (mod1, mod2, ...){

});

------------------------------------------------------------------------------

let a=12;
let b=5;

//1.key和value一样，简写
let json={a, b};

//2.函数
{
  show: function (){
    ...
  },
  show2: function (){
    ...
  }
}

{
  show(){
    ...
  },
  show2(){
    ...
  }
}

------------------------------------------------------------------------------

html->js      use
js->js        require

------------------------------------------------------------------------------

node的模块化：
1.没有define
2.exports、require、module
3.引用自定义模块
  放到node_modules里
  前面加./

------------------------------------------------------------------------------

1.创建包信息

------------------------------------------------------------------------------

ES6模块化：
import
export


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export

------------------------------------------------------------------------------

ES6——babel
WebPack

------------------------------------------------------------------------------

Node：
输出
exports.xx=xxx;
module.exports={x, x, x};

引入
let mod=require('./aaa.js');


ES6：
输出
export {x, x, x};

引入
import mod from "./xxx.js"

------------------------------------------------------------------------------

babel——ES6
1.安装babel-cli
  //cli=>command line interface
  npm i -g babel-cli

2.

------------------------------------------------------------------------------
