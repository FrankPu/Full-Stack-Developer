koa-convert

convert(function *(){})   ->    Promise

--------------------------------------------------------------------------------

全了

--------------------------------------------------------------------------------

前台渲染：
Vue：

--------------------------------------------------------------------------------

前台渲染：用户体验、数据量小
后台渲染：SEO、简单、安全性高、稳定性

--------------------------------------------------------------------------------

Angular   最早、没落
Vue       用的最多
React     大型项目、相对少

--------------------------------------------------------------------------------

Vue

MVC：
1.M     Model       数据
2.V     View        表现
3.C     Controller  逻辑

--------------------------------------------------------------------------------

MVC：
1.各个部分耦合度比较高
2.C特别庞大

MVP：
1.P特别庞大

MVVM：
1.M
2.V
3.VM  表现成程序

--------------------------------------------------------------------------------

最新的MVC：
1.M     数据
2.C     核心逻辑
3.VM    表现成、表现层代码

--------------------------------------------------------------------------------

1.创建Vue对象
  JS部分：
  new Vue({
    el: '#div1',
    data: {数据}
  });

  HTML：
  <div id="div1">
    {{数据}}
  </div>

--------------------------------------------------------------------------------

2.vue表达式({{}})，只能在标签内容里用
3.元素的属性：
  v-bind:属性="a"
  :属性="a"

--------------------------------------------------------------------------------

4.事件：
  v-on:click="xxx"
  或
  @click="xxx"

5.Vue内部的东西
  data: {数据}
  methods: {方法}

--------------------------------------------------------------------------------

vue表达式：{{xx}}
  *在标签里输出东西
vue指令：
  v-bind:xxx
  v-on:xxx

--------------------------------------------------------------------------------

单向绑定：数据->视图——数据变了，视图要变；视图变了，数据不会变
双向绑定：数据和视图之间双同步——任何一方变了，另一方都得跟着变

--------------------------------------------------------------------------------

v-bind      单向绑定，给属性
v-model     双向绑定，给value
v-on        事件，配合methods

--------------------------------------------------------------------------------

虚拟DOM

--------------------------------------------------------------------------------

server.use(body());
server.use(async ctx=>{
  ctx.request.fields;
});

--------------------------------------------------------------------------------
