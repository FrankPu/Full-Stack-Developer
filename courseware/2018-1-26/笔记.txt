1.vue基础
2.vue-router
3.component、通信、状态管理(vuex)
4.vue-cli

--------------------------------------------------------------------------------

渲染：
1.{{}}    转义输出(html标签显示出来)
2.v-html  原样输出

--------------------------------------------------------------------------------

data                        普通属性
methods                     普通方法
计算数据                     简单、可缓存；同步操作
  受控制的访问——get/set
监听                        异步操作
  当数据变化的时候，有通知

--------------------------------------------------------------------------------

渲染：
{{}}                转义输出
v-html              直接输出
:title              属性
@click              事件

--------------------------------------------------------------------------------

修饰符

--------------------------------------------------------------------------------

v-html
computed
watch
修饰符

--------------------------------------------------------------------------------

指令：
v-bind              渲染属性
v-on                事件
v-model
v-html
v-for               array, json, string, number

--------------------------------------------------------------------------------

v-if          删除、插入DOM节点
v-show        显示、隐藏——display

--------------------------------------------------------------------------------

v-cloak

--------------------------------------------------------------------------------

优化：
v-once  仅渲染一次
v-pre   禁用标签里面的表达式{{}}

--------------------------------------------------------------------------------

vue-router
1.用法：
  渲染容器：<router-view></router-view>
    *router的component会被渲染到里面
  路由跳转：<router-link to="xxx">文字</router-link>
2.JS操作路由
  this.$router.go(-3);
  this.$router.push('/user');
3.路由参数
  path: '/user/:id'
  $route.params.id
4.监听跳转
  1.watch     不推荐
  2.component里面加beforeRouteUpdate
    beforeRouteUpdate(to, from, next){
      //走
      next();

      //不希望路由切换
      //next();
    }

--------------------------------------------------------------------------------

总结：路由就是一个锚点(#xxx)，根据锚点信息，确定要显示哪个组件

--------------------------------------------------------------------------------

路由对象：
1.path          匹配路由路径，可以带参数
2.component     路由主体
3.children      子路由
  *路径

--------------------------------------------------------------------------------

命名路由：

router-link：
1.基本
  to="/路径"

2.扩展
  :to="{name, path, params, query}"

--------------------------------------------------------------------------------

命名视图(多视图)：
router-view

--------------------------------------------------------------------------------

路由：
1.工作原理：匹配#后面
2.带参数
3.多路由
4.单一路由下面，多视图

--------------------------------------------------------------------------------

组件=html+css+js

--------------------------------------------------------------------------------

vue1.x写法    √
vue2.x写法

--------------------------------------------------------------------------------

组件：
1.封装、用
2.父子组件
3.组件间通信

--------------------------------------------------------------------------------

全局组件：
1.注册(声明)
  Vue.component('名字', {template: 'xxx'});

2.使用
  <名字></名字>

--------------------------------------------------------------------------------

局部组件：
let vm=new Vue({
  components: {
    '名字': {template: 'xxx'}
  }
});

--------------------------------------------------------------------------------

Vue：
1.router
2.component

--------------------------------------------------------------------------------

1.组件的属性props
2.组件的refs
3.组件的事件$on,$emit
4.组件通信：
  父子
  跨组件
5.vue-cli
6.vuex
7.项目：？

--------------------------------------------------------------------------------
