c:\wamp\www\
http://localhost/


c:\wamp\www\2017-11-12\a\1.html
http://localhost/2017-11-12/a/1.html


http://localhost/wamp/www/2017-11-12/a/1.html     ×

------------------------------------------------------------------------------

组件：
1.seajs、requirejs
2.nodejs
3.ES6

------------------------------------------------------------------------------

seajs、requirejs：
1.在js文件里(模块里)
  define(function (require, exports, module){
    require('2.js')     <-难点
  });

2.在html文件里
  seajs.use('lib/1.js', function (mod){});

------------------------------------------------------------------------------

generator的本质：
语法糖

C++运算符重载：
arr1+arr2       =>    arr1.concat(arr2)
arr1+arr2+arr3  =>    arr1.concat(arr2).concat(arr3)

function *show(){
  let a=12;

  let data1=yield $.ajax('data/1.txt');

  let b=5;

  let data2=yield $.ajax('data/2.txt');

  return a+b;
}

↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

function show(){
  let a=12;

  $.ajax('data/1.txt').then(res=>{
    let data1=res;

    let b=5;

    $.ajax('data/2.txt').then(res=>{
      let data2=res;

      return a+b;
    });
  });
}

------------------------------------------------------------------------------

Promise的本质：状态机
1.当状态改变的时候——调用之前挂起的then队列
2.then的时候直接执行对应函数，并且参数给人家

------------------------------------------------------------------------------

库原理：
核心代码

------------------------------------------------------------------------------

301   永久——360buy.com->jd.com
302   临时——

------------------------------------------------------------------------------

form——不发出head请求

------------------------------------------------------------------------------

base64——编码方式

------------------------------------------------------------------------------

decorator——装饰者模式
对象生成之后，再给对象加东西

------------------------------------------------------------------------------

WebSocket：
1.双工
2.HTML5的
3.用的非常广

------------------------------------------------------------------------------

socket.io——node、前台

------------------------------------------------------------------------------

浏览器<->服务器     http

WebSocket协议是基于http的

------------------------------------------------------------------------------

sock.emit   发送
sock.on     接收

------------------------------------------------------------------------------

WebSocket——socket.io
1.服务端
  a.先有个http服务
    let server=http.createServer();
    server.listen(4311);

  b.再有个ws服务
    let wsServer=io.listen(server);
    wsServer.on('connection', function (sock){
      sock
    });

2.浏览器
  a.引库
    <script src="xxxx/socket.io/socket.io.js"></script>

  b.连接
    let sock=io.connect('ws://xxxx/');

------------------------------------------------------------------------------

sock.emit('名字', 参数...);
sock.on('名字', function (参数...){});
